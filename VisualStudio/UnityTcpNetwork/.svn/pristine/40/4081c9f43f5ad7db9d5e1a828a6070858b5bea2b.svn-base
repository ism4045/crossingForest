using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;

namespace Unity.Network
{
    public class LocalClient
    {
        private const string LocalIp = "127.0.0.1";
        public const int PortNumber = 10001;
        private const int BufferSize = 2048;

        private NetworkStream _stream;
        public NetworkStream Stream
        {
            get { return _stream; }
        }

        private readonly BinaryFormatter _formatter;

        private TcpClient _client;
        private byte[] _buffer;

        public string UserName { get; set; }

        public event Connected OnConnected;
        public event ConnectError OnConnectError;
        public event ReceiveObject OnReceiveObject;

        public LocalClient() : this(null)
        {
            
        }

        public LocalClient(TcpClient client)
        {
            _client = client;

            _formatter = new BinaryFormatter();
            _formatter.Binder = new PacketBinder();

            _buffer = new byte[BufferSize];
        }

        public void Start()
        {
            if (_client != null)
            {
                _stream = _client.GetStream();

                //서버 -> 클라이언트
                BeginRead();
            }
            else
            {
                //클라이언트 -> 서버
                StartClient();
            }
        }

        private void StartClient()
        {
            //클라이언트 -> 서버
            _client = new TcpClient();

            try
            {
                _client.BeginConnect(LocalIp, PortNumber, EndConnect, null);
            }
            catch (SocketException ex)
            {
                if (OnConnectError != null)
                    OnConnectError(ex);
            }
        }

        private void EndConnect(IAsyncResult result)
        {
            try
            {
                _client.EndConnect(result);
                _stream = _client.GetStream();

                if (OnConnected != null)
                    OnConnected(this);


                BeginRead();
            }
            catch (SocketException ex)
            {
                if (OnConnectError != null)
                    OnConnectError(ex);
            }
        }

        private void BeginRead()
        {
            _stream.BeginRead(_buffer, 0, BufferSize, new AsyncCallback(ReadObject), null);
        }

        public void Close()
        {
            _stream.Close();
            _client.Close();
        }

        private void ReadObject(IAsyncResult result)
        {
            int readSize = 0;

            try
            {
                lock (_stream)
                {
                    readSize = _stream.EndRead(result);
                }

                if (readSize < 1)
                    throw new Exception("Disconnect");


                Packet packet = new Packet();
                using (MemoryStream stream = new MemoryStream(_buffer))
                {
                    packet = (Packet)_formatter.Deserialize(stream);
                }

                if (OnReceiveObject != null)
                    OnReceiveObject(this, packet);


                lock (_stream)
                {
                    BeginRead();
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        private byte[] Serialize(Packet packet)
        {
            try
            {
                using (MemoryStream stream = new MemoryStream())
                {
                    _formatter.Serialize(stream, packet);

                    return stream.ToArray();
                }
            }
            catch
            {
                return null;
            }//try
        }

        public void WriteObject(Packet packet)
        {
            byte[] data = Serialize(packet);
            if (data == null || data.Length < 1)
                return;

            WriteObject(data);
            Flush();
        }

        private void WriteObject(byte[] data)
        {
            _stream.Write(data, 0, data.Length);
        }

        private void Flush()
        {
            _stream.Flush();
        }
    }

    public delegate void Connected(LocalClient client);
    public delegate void ConnectError(SocketException ex);
    public delegate void ReceiveObject(LocalClient client, Packet packet);
}
